#!/usr/bin/env python
""" cloud-init run gist

 Runs a gist specified on the kernel command line

 To use this cloud-init script, pass in "gist=" to the kernel
 this script will read it from /proc/cmdline

"""
import os
import tempfile
from contextlib import contextmanager
import subprocess

# Use requests if available,
# Fake the API if not, (wget is part of @system)
try:
    import requests
except ImportError:
    class Response(object):
        def __init__(self, content):
            self.content = content
        @property
        def text(self):
            return self.content
    class requests(object):
        @classmethod
        def get(cls, url):
            return Response(subprocess.check_output(
                            ["wget", "-O-", url],
                            stderr=open('/dev/null')))

# Store the kernel command line
with open("/proc/cmdline") as c:
    cmdline = c.read()


def get_gist_url():
    gist = [g for g in cmdline.split() if
            'gist=' in g]
    if not gist:
        gist = "7196742"
    else:
        gist = gist[0].split('=', 1)[1]

    return "https://gist.github.com/" + gist

def parse_gist_for_raw_url(gist_html):
    rawline = [l for l in gist_html.split('\n') if 'View Raw' in l][0]
    url = [l for l in rawline.split() if
           'href=' in l][0].split('=', 1)[1].strip('"')
    return "https://gist.github.com" + url


@contextmanager
def executingtemporaryfile():
    tfd, tname = tempfile.mkstemp()
    with os.fdopen(tfd, "w") as t:
        yield t
    os.chmod(tname, 700)
    subprocess.call(tname.split())
    os.remove(tname)

def main():
    gist_url = get_gist_url()
    gist = requests.get(gist_url).text
    script_url = parse_gist_for_raw_url(gist)
    with executingtemporaryfile() as t:
        t.write(requests.get(script_url).text)


if __name__ == '__main__':
    main()
