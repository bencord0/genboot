#!/bin/bash
###########
# Genboot #
###########

# A framework for building boot environments
############################################
#
# Example usage in clean qemu environment
#
# $ qemu-kvm \
# $     -m 10G \
# $     -smp 6 \
# $     -kernel vmlinuz \
# $     -net nic,model=virtio \
# $     -net user \
# $     -nographic \
# $     -append console=ttyS0

# Them, when inside the VM, login as root and run this README file.
# curl https://github.com/bencord0/genboot/raw/master/README | bash

# Which is, of course, useless without me also supplying the vmlinuz (kernel).
# I probably won't publish them until I can reliably  produce builds of the
# kernel and initramfs (with bundled filesystem), or kernel with included
# initramfs and rootfs that do not have any (re-)distribution and/or copyleft
# concerns. This is the source, I don't (yet?) publish binaries.

# In the meantime, any disposable Gentoo-like environment will do.
# But not the minimal install cd, since that doesn't have 'emerge'.

# If you do have a copy of the all-in-one kernel then you should be aware of
# the changes I have made.
# It does some things atypical to a standard distro initramfs.
#   - Only a kernel is supplied to qemu, there is no stateful disk needed.
#   - The root= kernel cmdline is set inside the initramfs, and does not need
#     to be supplied to qemu's "-append".
#   - The VM uses a lot of RAM. All writes are directed towards an RAM backed
#     AUFS rootfs.
#   - QEMU User networking provides a crippled network environment, sufficient
#     enough for TCP to download the portage tree and distfiles.
#   - Pointing to a local portage/distfiles mirror is recommended.
#     This involves setting SYNC, GENTOO_MIRRORS and optionally,
#     PORTAGE_BINHOST in /etc/portage/make.conf
#   - No other special networking needs to be made. Qemu can be run as a
#     non-privilaged user.
#   - However, bridged networking is more performant that user networking,
#     and may require administratice access on the host.
#   - While the kernel is fairly standard (sys-kernel/aufs-sources), however
#     network drivers and other config is tailored for my environment,
#     i.e. qemu/kvm virtio.
#     PXE booting may work, but your hardware might be different.
#   - Kernel modules inside the initramfs are coupled to the kernel version.
#     In theory, the kernel could be compiled without CONFIG_MODULES.
#   - The single, inclusive kernel image couples the version of kernel modules
#     in the initramfs to the kernel, so the above point is less of an issue.
#   - The final image is at least as big as any generated stage tarball since
#     the initramfs will effectively perform a stage3 install during the boot
#     process.
#     This presents a chicken/egg problem to visitors of this git repo that
#     requires the stage3 to build the boot environment, and the boot
#     environment to (cleanly) build the stage tarball.
#   - My custom dracut module is not documented or described here.
#     See prepare_dracut.sh for details.
#   - Once booted, root login is permitted (without password) on the console.
#     This can have security consequences, but this scheme does not allow
#     remote logins, or any password based authentication (e.g. pam/sudo/su)
#     to gain root access.
#     See 'grep root /etc/shadow' for details.
#   - Set a password or download an ssh key on first login.
#     e.g. https://github.com/{username}.keys -> ~/.ssh/authorized_keys

# Set SYNC and GENTOO_MIRRORS variables in /etc/portage/make.conf to
# use a local (and preferably internal) mirror to reduce load on upstream
# Gentoo infrastructure.
set -x

time emerge --sync --quiet && \
eix-update # Only update if there's anything to update

# Enable ssh, not sure why the ebuild didn't set these directories properly
chown root /var/empty
chmod 755 /var/empty
systemctl start sshd || /etc/init.d/sshd start

# Run /usr/bin/passwd to set a password to enable remote logins.
# (optional) passwd

# Otherwise, now is a good time to add a /root/.ssh/authorized_keys file.

set -e

# If, for some reason, binutils is not installed in $ROOT/usr/portage/profiles
# programs like ar and ld can't be found.
# make the symlinks by calling binutils-config when a real portage tree exists
ar -V || {
    source /etc/env.d/binutils/$(gcc -dumpmachine)-*
    binutils-config "$TARGET-$VER" && env-update
    source /etc/profile
}

# Make sure that the host system is somewhat sane.
# You did read the bit about using a disposible environment yes?
python-updater
perl-cleaner --all

# We'll need git to download these scripts.
# To save on compilation time, skip some of the bigger dependencies.
git --version || {
    # You are doing this in a throwaway environment aren't you?
    mkdir -p /etc/portage/package.use
    grep 'dev-vcs/git' /etc/portage/package.use/dev-vcs \
        || tee -a /etc/portage/package.use/dev-vcs \
        <<< 'dev-vcs/git -pcre -perl -python -webdav'

    # Do we need automake?
    eix -I sys-devel/automake$ || \
    emerge --deep --newuse --verbose --usepkg --getbinpkg --update --jobs \
        sys-devel/automake

    emerge --deep --newuse --verbose --usepkg --getbinpkg --update --jobs \
        dev-vcs/git
}

if [ -d /root/genboot ];
then
    (cd /root/genboot; git pull)
else
    git clone https://github.com/bencord0/genboot.git /root/genboot
fi

# Handbook installations and official Gentoo releases using catalyst are done
# from inside the chroot. We are not, so make portage aware of this.
(cd /; patch -p0 -l -N < /root/genboot/user.eclass.patch) || true

cd /root/genboot
bash stage-template.sh
bash build_stage3.sh
bash build_squashfs.sh
bash build_modules.sh
bash prepare_dracut.sh
bash build_initramfs.sh
bash build_vmlinuz.sh
bash pack_portdir.sh

# Build artifacts are stored in /root
cd /root

# These files can be used to install Gentoo from stage3
ls -l stage3-systemd.tar.xz # Stage 3 tarball of the rootfs
ls -l initramfs.nosquash    # Normal initramfs, no embedded rootfs
ls -l linux-image.tar.xz    # vmlinuz + modules tarball
ls -l portage.tar.xz        # portage snapshot, with distfiles and binpkgs

# These are extra files created during the build
ls -l systemd.squashfs      # Stage 3 squashfs of the rootfs
ls -l initramfs             # Dracut ramdisk with embeddeed squashfs rootfs
ls -l initramfs.cpio        # Uncompressed initramfs with embedded rootfs,
                            # needed during the final kernel build

# This is the ultimate build artifact, a self contained kernel image
# with the bundled initramfs and squashfs/aufs based environment.
ls -l vmlinuz               # Kernel image, with embedded initramfs and rootfs

